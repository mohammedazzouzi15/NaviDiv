# Generated by Copilot
import logging

from rdkit import Chem

from navidiv.fragment.fragment_scorer import FragmentScorer
from navidiv.fragment.utils import GetRingSystems, transform_molecules


class RingScorer(FragmentScorer):
    """Handles fragment scoring and analysis for molecular datasets."""

    def __init__(
        self,
        output_path: str | None = None,
    ) -> None:
        """Initialize FragmentScore.

        Args:
            min_count_fragments (int): Minimum count for fragments to be
                considered.
            output_path (str | None): Path to save output files.
        """
        super().__init__(output_path=output_path)
        self._csv_name = "Rings"

    def _get_fragment(self, mol: Chem.Mol) -> list[str]:
        """Extract functional groups from a molecule.

        Args:
            mol (Chem.Mol): RDKit molecule object.

        Returns:
            list[str]: List of functional group SMILES.
        """
        fragments_mol = []
        new_nodes_copy = GetRingSystems(mol)
        for fragment in new_nodes_copy:
            mol_fragment = Chem.MolFromSmiles(fragment)
            mol_fragment = transform_molecules(
                mol_fragment, self.tranfomation_mode
            )
            if mol_fragment is None:
                logging.warning(
                    "Fragment transformation failed for: %s", fragment
                )
                continue
            smiles_transformed = Chem.MolToSmiles(
                mol_fragment, isomericSmiles=True
            )
            if smiles_transformed is None:
                logging.warning(
                    "Fragment transformation failed for: %s", fragment
                )
                continue
            fragments_mol.append(smiles_transformed)
        return fragments_mol
