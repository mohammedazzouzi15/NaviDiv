import time  # Generated by Copilot

import pandas as pd

from navidiv import (
    cluster_similarity_scorer,
    orginal_similarity_scorer,
)
from navidiv.scaffold import Scaffold_scorer
from navidiv.stringbased import Ngram_scorer

def test_orginal_scorer(df, steps=[]):
    """Test the original similarity scorer."""
    df_original = pd.read_csv(
        "/media/mohammed/Work/Navi_diversity/examples/df_original.csv"
    )
    smiles_list_to_compare_to = df_original["smiles"].tolist()
    orginal_score = orginal_similarity_scorer.OriginalSimScorer(
        output_path="/media/mohammed/Work/Navi_diversity/examples/results/",
        threshold=0.3,
        smiles_list_to_compare_to=smiles_list_to_compare_to,
    )
    scores_list = []
    for step in steps:
        if hasattr(orginal_score, "_mol_smiles"):
            delattr(orginal_score, "_mol_smiles")
        df_copy = df[df["step"] == step]
        smiles_list = df_copy["SMILES"].tolist()
        scores = df_copy["Score"].tolist()

        start = time.time()  # Generated by Copilot
        scores_orginal = orginal_score.get_score(
            smiles_list=smiles_list,
            scores=scores,
            additional_columns_df={"step": step},
        )
        scores_list.append(scores_orginal)
        end = time.time()  # Generated by Copilot
        print(
            f"OriginalSimilarityScorer.get_score time: {end - start:.3f} seconds"
        )  # Generated by Copilot
        print("Original scores")
        print("scores", scores_orginal)
    df_scores = pd.DataFrame(scores_list)
    df_scores["step"] = steps
    df_scores.to_csv(
        "/media/mohammed/Work/Navi_diversity/examples/results/step_scores_original.csv",
        index=False,
    )
    return scores_orginal

def test_scaffold_scorer(df, steps=[]):
    """Test the scaffold scorer."""
    scaffold_score = Scaffold_scorer.Scaffold_scorer(
        output_path="/media/mohammed/Work/Navi_diversity/examples/results/",
        scaffold_type="csk_bm",
    )
    scores_list = []
    for step in steps:
        df_copy = df[df["step"] == step]
        smiles_list = df_copy["SMILES"].tolist()
        scores = df_copy["Score"].tolist()

        start = time.time()  # Generated by Copilot
        scores_scaffold = scaffold_score.get_score(
            smiles_list=smiles_list,
            scores=scores,
            additional_columns_df={"step": step},
        )
        scores_list.append(scores_scaffold)
        end = time.time()  # Generated by Copilot
        print(
            f"ScaffoldScorer.get_score time: {end - start:.3f} seconds"
        )  # Generated by Copilot
        print("Scaffold scores")
        print("scores", scores_scaffold)
    df_scores = pd.DataFrame(scores_list)
    df_scores["step"] = steps
    df_scores.to_csv(
        "/media/mohammed/Work/Navi_diversity/examples/results/step_scores_scaffolds.csv",
        index=False,
    )
    scaffold_score.overrepresented_fragments.to_csv(
        "/media/mohammed/Work/Navi_diversity/examples/results/overrepresented_scaffolds.csv",
        index=False,
    )
    return scores_scaffold


def test_cluster_scorer(df, steps=[]):
    """Test the cluster similarity scorer."""
    cluster_score = cluster_similarity_scorer.ClusterSimScorer(
        output_path="/media/mohammed/Work/Navi_diversity/examples/results/",
        threshold=0.25,
    )

    scores_list = []
    for step in steps:
        if hasattr(cluster_score, "_mol_smiles"):
            delattr(cluster_score, "_mol_smiles")
        df_copy = df[df["step"] == step]
        smiles_list = df_copy["SMILES"].tolist()
        scores = df_copy["Score"].tolist()

        start = time.time()  # Generated by Copilot
        scores_ngram = cluster_score.get_score(
            smiles_list=smiles_list,
            scores=scores,
            additional_columns_df={"step": step},
        )
        scores_list.append(scores_ngram)
        end = time.time()  # Generated by Copilot
        print(
            f"NgramScorer.get_score time: {end - start:.3f} seconds"
        )  # Generated by Copilot
        print("clusters scores")
        print("scores", scores_ngram)
    df_scores = pd.DataFrame(scores_list)
    df_scores["step"] = steps
    df_scores.to_csv(
        "/media/mohammed/Work/Navi_diversity/examples/results/step_scores_clusters.csv",
        index=False,
    )
    cluster_score.overrepresented_fragments.to_csv(
        "/media/mohammed/Work/Navi_diversity/examples/results/overrepresented_clusters.csv",
        index=False,
    )

    return scores_ngram


def test_ngram_scorer(df, steps=[]):
    """Test the ngram scorer."""
    ngram_score = Ngram_scorer.NgramScorer(
        ngram_size=10,
        output_path="/media/mohammed/Work/Navi_diversity/examples/results/",
    )
    scores_list = []
    for step in steps:
        df_copy = df[df["step"] == step]
        smiles_list = df_copy["SMILES"].tolist()
        scores = df_copy["Score"].tolist()

        start = time.time()  # Generated by Copilot
        scores_ngram = ngram_score.get_score(
            smiles_list=smiles_list,
            scores=scores,
            additional_columns_df={"step": step},
        )
        scores_list.append(scores_ngram)
        end = time.time()  # Generated by Copilot
        print(
            f"NgramScorer.get_score time: {end - start:.3f} seconds"
        )  # Generated by Copilot
        print("Ngram scores")
        print("scores", scores_ngram)
    df_scores = pd.DataFrame(scores_list)
    df_scores["step"] = steps
    df_scores.to_csv(
        "/media/mohammed/Work/Navi_diversity/examples/results/step_scores_ngrams.csv",
        index=False,
    )
    ngram_score.overrepresented_fragments.to_csv(
        "/media/mohammed/Work/Navi_diversity/examples/results/overrepresented_ngrams.csv",
        index=False,
    )

    return scores_ngram


if __name__ == "__main__":
    csv_file = "/media/mohammed/Work/Navi_diversity/examples/stage0_1.csv"
    df = pd.read_csv(csv_file)
    df = df.dropna(subset=["SMILES"])

    # test_ngram_scorer(df, steps=range(5, 1000, 50))
    test_cluster_scorer(df, steps=range(50, 1000, 50))
    #test_scaffold_scorer(df, steps=range(5, 1000, 50))
    test_orginal_scorer(df, steps=range(5, 1000, 50))
    print("done")
