

from urllib import parse

import pandas as pd
from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem.Scaffolds import rdScaffoldNetwork

from navidiv.utils import get_smiles_column


def smi2svg(smi):
    mol = Chem.MolFromSmiles(smi)
    try:
        Chem.rdmolops.Kekulize(mol)
    except Exception:
        pass
    drawer = Draw.rdMolDraw2D.MolDraw2DSVG(250, 200)
    Draw.rdMolDraw2D.PrepareAndDrawMolecule(drawer, mol)
    drawer.FinishDrawing()
    svg = drawer.GetDrawingText()
    return svg


def smi2image(smi):
    svg_string = smi2svg(smi)
    impath = "data:image/svg+xml;charset=utf-8," + parse.quote(
        svg_string, safe=""
    )
    return impath


def build_scaffold_network(mols, params=None):
    if params is None:
        params = rdScaffoldNetwork.ScaffoldNetworkParams()
        params.collectMolCounts = True
    net = rdScaffoldNetwork.CreateScaffoldNetwork(mols, params)
    return net


def plot_scaffold_network(nodes, filename="scaffold_network.png", labels=None):
    # Collect nodes and edges
    _nodes = []
    images = []
    for idx, node in enumerate(nodes):
        smi = node
        try:
            mol = Chem.MolFromSmiles(smi)
        except Exception as e:
            print(f"Error parsing SMILES '{smi}': {e}")
            mol = None
        if mol is None:
            continue
        _nodes.append(mol)
        images.append(smi2svg(smi))
    print("will plot scaffold network with", len(_nodes), "nodes")

    # Draw as grid image (SVGs not supported in grid, so fallback to PNG)
    img = Draw.MolsToGridImage(
        _nodes,
        legends=labels,
        molsPerRow=4,
        subImgSize=(250, 200),
        useSVG=False,
    )
    img.save(filename)
    print(f"Scaffold network image saved as {filename}")


def remove_substructure(mol, substruct_smarts):
    """Remove a substructure (given as SMARTS) from a molecule.
    Returns a list of resulting molecule fragments (as Chem.Mol objects).
    If the substructure is not found, returns the original molecule in a list.
    Generated by Copilot.
    """
    patt = Chem.MolFromSmarts(substruct_smarts)
    if patt is None:
        raise ValueError("Invalid SMARTS pattern")
    matches = mol.GetSubstructMatch(patt)
    if not matches:
        return []
    # Remove the atoms in the match
    emol = Chem.EditableMol(mol)
    # Remove atoms in reverse order to avoid reindexing issues
    for idx in sorted(matches, reverse=True):
        emol.RemoveAtom(idx)
    frag_mol = emol.GetMol()
    # Split into fragments if disconnected
    frags = Chem.GetMolFrags(frag_mol, asMols=True, sanitizeFrags=False)
    return list(frags)


def is_fragment_in_molecule(mol, fragment_smarts):
    """Check if a fragment (given as SMARTS or SMILES) is present in the molecule.
    Returns True if found, False otherwise.
    Generated by Copilot.
    """
    frag = Chem.MolFromSmarts(fragment_smarts)
    if frag is None:
        frag = Chem.MolFromSmiles(fragment_smarts)
    if frag is None:
        raise ValueError("Invalid fragment SMARTS/SMILES")
    return mol.HasSubstructMatch(frag)


def get_fragment_not_in_scaffolds(mol, scaffolds):
    """Get fragments of a molecule that are not present in the given scaffolds.
    Returns a list of fragments (as SMARTS).
    Generated by Copilot.
    """
    fragments = set(
        [Chem.MolToSmiles(mol)]
    )  # Start with the original molecule
    for scaffold in scaffolds:
        try:
            if mol.HasSubstructMatch(Chem.MolFromSmiles(scaffold)):
                fragments.add(scaffold)
            for frag in remove_substructure(mol, scaffold):
                if mol.HasSubstructMatch(frag):
                    fragments.add(Chem.MolToSmiles(frag))
        except Exception as e:
            print(f"Error processing scaffold '{scaffold}': {e}")
            continue
    fragments = [
        smi for smi in fragments if Chem.MolFromSmiles(smi) is not None
    ]
    return fragments


if __name__ == "__main__":
    # Example: use a few molecules
    csv_file = "/media/mohammed/Work/Navi_diversity/reinvent_runs/runs/test/no_filter_high_sigma/stage0_1_TSNE.csv"  # /media/mohammed/Work/Navi_diversity/reinvent_runs/runs/tests/test4/stage0/stage0_1_TSNE.csv"
    # "/media/mohammed/Work/Navi_diversity/reinvent_runs/runs/tests/test2/stage0/results/clusters/groupby_results_clusters.csv"
    df = pd.read_csv(csv_file).sample(frac=1).reset_index(drop=True)
    df = df[df["step"] == 920]
    print("columns", df.columns)
    smiles_col = get_smiles_column(df)
    df = df.dropna(subset=[smiles_col])
    smiles_list = df[smiles_col].tolist()
    mols = [Chem.MolFromSmiles(smi) for smi in smiles_list]
    params = rdScaffoldNetwork.BRICSScaffoldParams()
    net = build_scaffold_network(mols, params)
    print("Scaffold network built with", len(net.nodes), "nodes")
    fragments = []
    for mol in mols:
        new_nodes_copy = get_fragment_not_in_scaffolds(mol, net.nodes)
        fragments.extend(new_nodes_copy)

    fragment_df = pd.DataFrame(
        {
            "SMILES": fragments,
            "num_atoms": [
                Chem.MolFromSmiles(smi).GetNumAtoms() for smi in fragments
            ],
        }
    )
    fragment_df.to_csv("fragments.csv", index=False)

