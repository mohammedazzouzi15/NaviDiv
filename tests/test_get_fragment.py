# Generated by Copilot
import logging

import pandas as pd
from rdkit import Chem
from rdkit.Chem import Draw

from navidiv.fragment.utils.Mac_frag import MacFrag
from navidiv.scorer import BaseScore

DIFF_MEDIAN_SCOR_LIMIT = 0.2
MIN_COUNT_FRAGMENTS = 1
MAX_BLOCKS = 6
MAX_SR = 1
MIN_FRAG_ATOMS = 3
MAX_FRAGMENT_ATOMS = 40

def get_fragment(mol: Chem.Mol) -> list[str]:
    """Extract fragments from a molecule using MacFrag and fused ring fragmentation."""
    if mol is None:
        return []
    mol_fragments = [
        mol_frag
        for mol_frag in MacFrag(
            mol,
            maxBlocks=MAX_BLOCKS,
            maxSR=MAX_SR,
            asMols=True,
            minFragAtoms=MIN_FRAG_ATOMS,
        )
    ]
    fragments_cleaned = []
    for mol_fragment in mol_fragments:
        if mol_fragment is not None:
            try:
                if mol.HasSubstructMatch(mol_fragment):
                    fragments_cleaned.append(Chem.MolToSmarts(mol_fragment))
            except (ValueError, TypeError):
                logging.exception(
                    "Issue with fragment: %s; Error in matching fragment.",
                    Chem.MolToSmarts(mol_fragment),
                )
                continue
    return [Chem.MolToSmarts(mol_fragment) for mol_fragment in mol_fragments], fragments_cleaned


def draw_molecules(mols: list[Chem.Mol], legends: list[str] = None, mols_per_row: int = 4, sub_img_size=(200, 200)):
    """
    Draws a grid of molecules using RDKit's Draw.MolsToGridImage.
    Args:
        mols: List of RDKit Mol objects.
        legends: Optional list of legends for each molecule.
        mols_per_row: Number of molecules per row in the grid.
        sub_img_size: Size of each molecule image.
    """
    # Generated by Copilot
    img = Draw.MolsToGridImage(mols, legends=legends, molsPerRow=mols_per_row, subImgSize=sub_img_size, useSVG=False)
    return img


if __name__ == "__main__":
    # Example usage
    smiles = "Cc1c(C(=O)c2ccccc2)c(=NNc2ccccc2)c(=NNc2ccccc2)c1=NNc1ccccc1"  # Benzene ring
    mol = Chem.MolFromSmiles(smiles)
    fragments, fragments_cleaned = get_fragment(mol)
    print(f"Fragments for {smiles}: {fragments}")
    print(f"Number of fragments: {len(fragments)}")
    print(f"Number of cleaned fragments: {len(fragments_cleaned)}")
    # Draw the fragment molecules
    fragment_mols = [Chem.MolFromSmarts(frag) for frag in fragments if Chem.MolFromSmarts(frag) is not None]
    img = draw_molecules(fragment_mols, legends=fragments)
    img.save("fragments_grid.png")
    smarts = "[#6]-[#6]1:[#6](:[#6](=[#7]-[#7]-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6](=[#7]-[#7]-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:1=[#7]-[#7]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[16#0]"  
    print(f"Is the fragment {smarts} present in the molecule? {mol.HasSubstructMatch(Chem.MolFromSmarts(smarts))}")